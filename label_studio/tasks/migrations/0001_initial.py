# Generated by Django 3.1.13 on 2022-04-12 00:11

import core.mixins
from django.db import migrations, models
import django.db.models.deletion
import tasks.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.JSONField(default=None, help_text='The main value of annotator work - labeling result in JSON format', null=True, verbose_name='result')),
                ('was_cancelled', models.BooleanField(db_index=True, default=False, help_text='User skipped the task', verbose_name='was cancelled')),
                ('ground_truth', models.BooleanField(db_index=True, default=False, help_text='This annotation is a Ground Truth (ground_truth)', verbose_name='ground_truth')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Creation time', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time', verbose_name='updated at')),
                ('lead_time', models.FloatField(default=None, help_text='How much time it took to annotate the task', null=True, verbose_name='lead time')),
                ('prediction', models.JSONField(default=dict, help_text='Prediction viewed at the time of annotation', null=True, verbose_name='prediction')),
                ('result_count', models.IntegerField(default=0, help_text='Results inside of annotation counter', verbose_name='result count')),
            ],
            options={
                'db_table': 'task_completion',
            },
            bases=(core.mixins.DummyModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AnnotationDraft',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.JSONField(help_text='Draft result in JSON format', verbose_name='result')),
                ('lead_time', models.FloatField(help_text='How much time it took to annotate the task', verbose_name='lead time')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Creation time', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update time', verbose_name='updated at')),
            ],
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.JSONField(default=dict, help_text='Prediction result', null=True, verbose_name='result')),
                ('score', models.FloatField(default=None, help_text='Prediction score', null=True, verbose_name='score')),
                ('model_version', models.TextField(blank=True, default='', null=True, verbose_name='model version')),
                ('cluster', models.IntegerField(default=None, help_text='Cluster for the current prediction', null=True, verbose_name='cluster')),
                ('neighbors', models.JSONField(blank=True, help_text='Array of task IDs of the closest neighbors', null=True, verbose_name='neighbors')),
                ('mislabeling', models.FloatField(default=0.0, help_text='Related task mislabeling score', verbose_name='mislabeling')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'db_table': 'prediction',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, db_index=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(help_text='User imported or uploaded data for a task. Data is formatted according to the project label config. You can find examples of data for your project on the Import page in the Label Studio Data Manager UI.', verbose_name='data')),
                ('meta', models.JSONField(default=dict, help_text='Meta is user imported (uploaded) data and can be useful as input for an ML Backend for embeddings, advanced vectors, and other info. It is passed to ML during training/predicting steps.', null=True, verbose_name='meta')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Time a task was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last time a task was updated', verbose_name='updated at')),
                ('is_labeled', models.BooleanField(db_index=True, default=False, help_text='True if the number of annotations for this task is greater than or equal to the number of maximum_completions for the project', verbose_name='is_labeled')),
                ('overlap', models.IntegerField(db_index=True, default=1, help_text='Number of distinct annotators that processed the current task', verbose_name='overlap')),
            ],
            options={
                'db_table': 'task',
                'ordering': ['-updated_at'],
            },
            bases=(tasks.mixins.TaskMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TaskLock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expire_at', models.DateTimeField(verbose_name='expire_at')),
                ('task', models.ForeignKey(help_text='Locked task', on_delete=django.db.models.deletion.CASCADE, related_name='locks', to='tasks.task')),
            ],
        ),
    ]
